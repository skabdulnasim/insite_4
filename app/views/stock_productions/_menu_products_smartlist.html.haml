- unless smart_listing.empty?
  
  %h5
    %b Menu products
  %table.table.table-bordered.table-hover
    %thead
      %tr
        %th.col-lg-1 
          /%input.checkbox-parent-toggle{:type => "checkbox"}
        %th.col-lg-4 Menu Product
        %th.col-lg-7 Estimation of individual ingredients
    %tbody    
      - @ingredient_arr = {} 
      - smart_listing.collection.each do |mp|
        -if mp[:product_type] != "variable"
          %tr
            %td{:style=>"text-align:center"}
              %input{:type => "checkbox",:class=>"checkbox-child menu-pro-check-#{mp.id} kitchen-pro-menu-child-check", :name => "checked_raw[]", :value => mp.id, :id => mp.id}
              %label{:for=> mp.id}
            %td{:style=>"text-align:center;font-weight:bold;"}
              - if mp.product_image
                %img{:src => "/uploads/#{mp.product_image}", :class => "img-thumbnail", :height => 50, :width =>75 }
              %span
                / =mp.name
                = mp.package_component.present? ?  mp.product_name(mp) : mp.name            
              .input-group
                .input-group-addon
                  Quantity
                %input.form-control.numeric-only{:name => "quantity_#{mp.id}", :value=>"1", :class => "menu-numbers numbers#{mp.id}", :id => "#{mp.id}", :type => "text"}
                .input-group-addon=mp.basic_unit 
              %br
              .input-group.margin-b-2{"data-placement"=>"right","data-trigger"=>"hover","data-content" => get_stock_details(mp.id,current_user), "data-toggle" => "popover", :title => "Stock details ", "data-html"=>"true"}
                %span.input-group-addon.font-sz-12
                  %small
                  ="Available:"
                %input.numeric-only{:class => "form-control",:id =>"transferid", :name => "quantity", :placeholder => "Enter stock", :type => "text", :value => "#{get_product_total_staock(mp.id).pro_total_stock.to_f}",:readonly => true}        

            %td
              .col-lg-12{:style=>"max-height:400px;overflow-y:scroll"}
                - sub_products = ProductComposition::get_sub_products(mp.id)
                - if sub_products.present?
                  - sub_products.each do |mk|
                    - _sub_product_details = ProductComposition::get_product_details_by_id(mk['raw_product_id'])
                    - _sub_pro_id = _sub_product_details[:id]
                    - _sub_pro_stock = get_product_current_stock(@store.id, _sub_pro_id)
                    - _raw_pro_unit = ProductComposition::get_product_unit_details(mk['raw_product_unit'])
                    - _pro_unit_multiplier = _raw_pro_unit.multiplier #Getting the product multiplier
                    - _inventry_equity_quantity = (_pro_unit_multiplier.to_f)*(mk['raw_product_quantity'].to_f) #Generating the stock to deduct

                    .input-group{:style=>"margin-bottom:2px;"}
                      %span.input-group-addon{:style=>"width:50%;text-align:left"}
                        =_sub_product_details[:name]
                      %input.form-control{:class => "menu_sub_number menu-subnumbers#{mp.id} raw-product-#{_sub_pro_id}",:value=>"#{_inventry_equity_quantity}", :id => "#{_inventry_equity_quantity}", :type => "text", 'data-menu-pro-id'=>"#{mp.id}", 'data-product-id'=>"#{_sub_pro_id}",:name => "raw_quantity_#{mp.id}"}                      
                      %span.input-group-addon{:style=>"width:15%;"}
                        / =_sub_product_details[:basic_unit]
                        =_sub_product_details.basic_unit

                    - # Filling the ingredients array
                    -_raw_arr = {}
                    -_raw_arr[:raw_product_id]   = _sub_pro_id
                    -_raw_arr[:raw_product_name] = _sub_product_details[:name]
                    -_raw_arr[:raw_product_unit] = _sub_product_details[:basic_unit]
                    -_raw_arr[:raw_product_stock] = _sub_pro_stock
                    - if !@ingredient_arr.has_key?(_sub_pro_id)  
                      -@ingredient_arr[_sub_pro_id] = _raw_arr   


                - _process_compositions = ProcessComposition::by_product_id(mp.id)
                - if _process_compositions.present?
                  %hr
                  .input-group{:style => "font-size:14px;font-weight:bold;margin-bottom:10px;"}= "Processes"
                  - _process_compositions.each do |process_composition|
                    .input-group{:style=>"margin-top:2px;"}
                      %span.input-group-addon{:style=>"padding:9px;"}
                        = process_composition.production_process.name
                      %span.input-group-addon{:style=>"padding:9px;"}
                        = process_composition.duration.to_i.to_s + ' min.'

                / - if mp.menu_products[0].menu_product_combinations.present?
                /   %hr
                /   .input-group{:style => "font-size:14px;font-weight:bold;margin-bottom:10px;"}= "Combinations"
                /   - mp.menu_products[0].menu_product_combinations.each do |mp_c|
                /     .input-group{:style=>"margin-top:2px;"}
                /       %span.input-group-addon{:style=>"padding:9px;"}
                /         .float-l.margin-l-10
                /           = mp_c.product.name
                /       %span.input-group-addon{:style=>"padding:9px;"}
                /         .float-r.margin-r-10
                /           = "#{mp_c.ammount} #{mp_c.product_unit.short_name}"

  = smart_listing.paginate
  = smart_listing.pagination_per_page_links 
                   
  
  
- else
  .alert.alert-warning
    No menu products found
